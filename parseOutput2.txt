Token:              Keyword		 Lexeme: function

<RAT18F> ::= <Opt Function Definitions> $$ <Opt Declaration List> <Statement List> $$
<Opt Function Definitions> ::= <Function Definitions>
<Function Definitions> ::= <Function> <Function Definitions>'
<Function> ::= function <Identifier> (<Opt Parameter List>) <Opt Declaration List> <Body>
Match function and Keyword(function)

Token:           Identifier Lexeme: convert1x

Match Identifier and Identifier(convert1x)

Token:           Separators Lexeme: (

Match ( and Separators(()

Token:           Identifier Lexeme: fahr

<Opt Parameter List> ::= <Parameter List>
<Parameter List> ::= <Parameter> <Parameter List>'
<Parameter> ::= <IDs > : <Qualifier>

<IDs> ::= <Identifier> <IDs>'
Match Identifier and Identifier(fahr)

Token:           Separators Lexeme: :

<IDs>' ::= epilson
Match : and Separators(:)

Token:              Keyword Lexeme: int

<Qualifier> ::= int

Match int and Keyword(int)

Token:           Separators Lexeme: )

<Parameter List>' ::= epilson
Match ) and Separators())

Token:           Separators Lexeme: {

<Opt Declaration List> ::= <Empty>
<Body> ::= { < Statement List> }
Match { and Separators({)

Token:              Keyword Lexeme: return

<Statement List> ::= <Statement> <Statement List>'
<Statement> ::= <Return>
<Return> ::= return <Return>'
Match return and Keyword(return)

Token:              Integer Lexeme: 5

<Return>' ::= <Expression>
<Expression> ::= <Term> <Expression>'
<Term> ::= <Factor> <Term>'
<Factor> ::= <Primary>
<Primary> ::= <Integer>
Match Integer and Integer(5)

Token:            Operators Lexeme: *

<Term>' ::= *<Factor> <Term>'
Match * and Operators(*)

Token:           Separators Lexeme: (

<Factor> ::= <Primary>
<Primary> ::= (<Expression>)
Match ( and Separators(()

Token:           Identifier Lexeme: fahr

<Expression> ::= <Term> <Expression>'
<Term> ::= <Factor> <Term>'
<Factor> ::= <Primary>
<Primary> ::= <Identifier> <Primary>'
Match Identifier and Identifier(fahr)

Token:            Operators Lexeme: -

<Primary>' ::= epilson
<Term>' ::= epilson
<Expression>' ::= -<Term> <Expression>'
Match - and Operators(-)

Token:              Integer Lexeme: 32

<Term> ::= <Factor> <Term>'
<Factor> ::= <Primary>
<Primary> ::= <Integer>
Match Integer and Integer(32)

Token:           Separators Lexeme: )

<Term>' ::= epilson
<Expression>' ::= epilson
Match ) and Separators())

Token:           Separators Lexeme: /

<Term>' ::= /<Factor> <Term>'
Match / and Separators(/)

Token:              Integer Lexeme: 9

<Factor> ::= <Primary>
<Primary> ::= <Integer>
Match Integer and Integer(9)

Token:           Separators Lexeme: ;

<Term>' ::= epilson
<Expression>' ::= epilson
Match ; and Separators(;)

Token:           Separators Lexeme: }

<Statement List>' ::= epilson
Match } and Separators(})

Token:           Separators Lexeme: $$

<Function Definition>' ::= <Empty
Match $$ and Separators($$)

Token:            Operators Lexeme: >

<Opt Declaration List> ::= <Empty>
<Statement List> ::= <Statement> <Statement List>'
Error: Expected { | <Identifier> | if | return | put | get | while instead of Operators(>) 
No Match for <Statement>
Line: 9
